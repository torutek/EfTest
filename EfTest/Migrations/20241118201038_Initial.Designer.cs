// <auto-generated />
using System;
using EfTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfTest.Migrations
{
    [DbContext(typeof(EfTestContext))]
    [Migration("20241118201038_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfTest.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("EfTest.Models.PersonPhoto", b =>
                {
                    b.Property<int>("PersonPhotoId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonPhotoId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPhotos");
                });

            modelBuilder.Entity("EfTest.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EfTest.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("PersonTeam", b =>
                {
                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("PeoplePersonId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("PersonTeam");
                });

            modelBuilder.Entity("EfTest.Models.PersonPhoto", b =>
                {
                    b.HasOne("EfTest.Models.Person", "Person")
                        .WithMany("Photos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EfTest.Models.Vehicle", b =>
                {
                    b.HasOne("EfTest.Models.Team", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("PersonTeam", b =>
                {
                    b.HasOne("EfTest.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfTest.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfTest.Models.Person", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("EfTest.Models.Team", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
